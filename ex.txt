/*
ecpg ex.txt
cc -I/usr/include/postgresql -c ex.c
cc -o ex ex.o -L/usr/lib/x86_64-linux-gnu -lecpg,
��� -L/usr/lib/x86_64-linux-gnu ���� ��� ����� libecpg.so
-I/usr/include/postgresql ���� ��� ����� ecpgtype.h, ecpglib.h, ecpgerrno.h, sqlca.h.
*/


#include "C:/Program Files/PostgreSQL/15/include/ecpglib.h"
#include "C:/Program Files/PostgreSQL/15/include/ecpgerrno.h"
#include "C:/Program Files/PostgreSQL/15/include/sqlca.h"
//#include "db_public_station.h"

#include <stdio.h>
#include <string.h>
#include <iostream>
#include <string>

EXEC SQL include sqlca;

EXEC SQL BEGIN DECLARE SECTION; 
        char ConnectionString [] = "public transport@127.0.0.1:5432";
        char Login [] = "postgres";
        char Password [] = "20012001a";
EXEC SQL END DECLARE SECTION;

EXEC SQL BEGIN DECLARE SECTION;
        //int my_id;
        //char my_data[256];
        //int my_count;
        //char date1[10];
        //char date2[10];
        int addr;
        char title[64];
        int type_st;
EXEC SQL END DECLARE SECTION;	

EXEC SQL WHENEVER SQLERROR SQLPRINT;	

class table_station {
public:
using id_t = int;
    using title_t = std::string;
    using station_t = int;
protected:
EXEC SQL BEGIN DECLARE SECTION;  

        int address_id;
        char title[64];
        int type_station;
EXEC SQL END DECLARE SECTION;

public:

    table_station() = default;
    ~table_station() = default;
    
    const char* insert() const noexcept {
        return "INSERT INTO t_stop(address_id, title, type_station) VALUES(?, ?, ?);"; 
    }

    void exec_3args() {
        EXEC SQL EXECUTE mystmt USING :address_id, :title, :type_station;
    }

    void exec_fetch() {        
        //EXEC SQL FETCH MyCursor INTO :address_id, :title, :type_station;
    }



    void input() {
        std::cout << "enter new 'address_id' >"; 
        std::cin >> address_id;
        std::cout << "enter new 'title' >";
        std::cin >> title;
        std::cout << "enter new 'stantion type' >"; 
        std::cin >> type_station;
    }

    void enter_id() {
        std::cout << "enter new 'address_id' >"; 
        std::cin >> address_id;
    }
/*
    void exec_select() {
            EXEC SQL EXECUTE sqlstmt INTO : address_id, title, type_station USING : address_id;
    }
*/
    const char* select_show() const noexcept {
        return "SELECT address_id, title, type_station FROM t_stop ORDER BY address_id";
    }

    void print() const noexcept {
        std::cout << address_id << " "  << title << " " << type_station << std::endl;
     }




};


   
int menu();
int main() {

        EXEC SQL CONNECT TO :ConnectionString  USER :Login using :Password;


        if( sqlca.sqlcode != 0 || strncmp(sqlca.sqlstate,"00",2))
        {
                printf("connect -- NoOK\n");
                return 0;
        }
        else
        {
                printf("connect --OK\n");	
                menu();
        }	
        exec sql disconnect;
        printf("disconnect --OK\n");
}



int Dynamic_sql_insert()
{
table_station table;
EXEC SQL BEGIN DECLARE SECTION; 
        const char* stmt = table.insert(); 
EXEC SQL END DECLARE SECTION;

        EXEC SQL PREPARE mystmt FROM :stmt;
        table.input();
        
        table.exec_3args();
       // EXEC SQL EXECUTE mystmt USING :address_id, :title, :type_station;
        EXEC SQL COMMIT;
        return 0;
}

int Dynamic_sql_select_1(const char * request_sql)
{
        EXEC SQL BEGIN DECLARE SECTION;
                int colcount;
                int index;
                char str[1024];
                char colName[1024];
                const char * stmt = request_sql;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL PREPARE sqlstmt FROM :stmt;

        EXEC SQL ALLOCATE DESCRIPTOR my_descr;   

        EXEC SQL DECLARE my_cursor CURSOR FOR sqlstmt;
        EXEC SQL OPEN my_cursor;


        
        EXEC SQL FETCH NEXT FROM my_cursor INTO SQL DESCRIPTOR my_descr;
        
        EXEC SQL GET DESCRIPTOR my_descr :colcount = COUNT;
        for(index = 1; index <= colcount; index++) {
                EXEC SQL GET DESCRIPTOR my_descr VALUE :index :str = DATA;
                EXEC SQL GET DESCRIPTOR my_descr VALUE :index :colName = NAME;
                std::cout << str << " ";
        }
        std::cout << '\n';
        EXEC SQL DEALLOCATE DESCRIPTOR my_descr;
        EXEC SQL CLOSE my_cursor;
        EXEC SQL COMMIT;
        

        
        
        
        
        
        //EXEC SQL EXECUTE sqlstmt INTO : address_id, title, type_station USING : address_id;
  
    return 0;
}


/*
int Dynamic_sql_select_2()
{
     EXEC SQL BEGIN DECLARE SECTION;           
          char *stmt = "SELECT name "
             "  FROM exTab "
             "  WHERE id>=? and id<=?";
     int id_min;
     int id_max;
     EXEC SQL END DECLARE SECTION;



     EXEC SQL PREPARE sqlstmt FROM :stmt;

     EXEC SQL DECLARE my_cursor CURSOR FOR sqlstmt ;

printf("select 'id_min' >");
        scanf("%d", &id_min);

printf("select 'id_max' >");
        scanf("%d", &id_max);

     EXEC SQL OPEN my_cursor USING :id_min,:id_max;



     while (1)
     {
        EXEC SQL FETCH my_cursor INTO :my_data;    
        if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
        printf("name=%s\n", my_data);	
     }

    EXEC SQL CLOSE my_cursor;

    EXEC SQL COMMIT;
    return 0;
}
*/

int InsertValues()
{	
               
        std::cout << "enter new 'address_id' >"; 
        std::cin >> addr;
        std::cout << "enter new 'title' >";
        std::cin >> title;
        std::cout << "enter new 'stantion type' >"; 
        std::cin >> type_st;
        
        EXEC SQL INSERT INTO t_stop( address_id , title , type_station) VALUES(:addr, :title, :type_st);

        EXEC SQL COMMIT;
        return 0;
}


int ReadAllRecord()
{
        EXEC SQL BEGIN DECLARE SECTION; 
                int colcount;
                int index;
                char str[1024];
                char colName[1024];
                const char * stmt = "SELECT address_id, title, type_station FROM t_stop ORDER BY address_id";
        EXEC SQL END DECLARE SECTION;
 
        EXEC SQL PREPARE sqlstmt FROM :stmt;

        EXEC SQL ALLOCATE DESCRIPTOR myDescr;   

        EXEC SQL DECLARE MyCursor CURSOR FOR sqlstmt;
        EXEC SQL OPEN MyCursor;
        
        while(1)
        {                        
                EXEC SQL FETCH NEXT FROM MyCursor INTO SQL DESCRIPTOR myDescr;
                
                if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
                EXEC SQL GET DESCRIPTOR myDescr :colcount = COUNT;
                for(index = 1; index <= colcount; index++) {
                        EXEC SQL GET DESCRIPTOR myDescr VALUE :index :str = DATA;
                        EXEC SQL GET DESCRIPTOR myDescr VALUE :index :colName = NAME;
                        std::cout << str << " ";
                }
                std::cout << '\n';
        }
        EXEC SQL DEALLOCATE DESCRIPTOR myDescr;
        EXEC SQL CLOSE MyCursor;
        EXEC SQL COMMIT;
        
        return 0;
}







int SelectValues()
{	

        
        std::cout << "select 'address_id' >";
        std::cin >> addr;
        
        EXEC SQL SELECT address_id, title, type_station INTO :addr, :title, :type_st FROM t_stop WHERE address_id = :addr;
        std::cout << addr << " " << title << " " << type_st << std::endl;
        return 0;
}

int UpdateValues()
{	

        std::cout << "select updatable 'address_id' >";
        std::cin >> addr;
        std::cout << "enter new 'title' >";
        std::cin >> title;
        std::cout << "enter new 'type_station' >";
        std::cin >> type_st;
         
        EXEC SQL UPDATE t_stop SET title = :title, type_station = :type_st WHERE address_id = :addr;	

        EXEC SQL COMMIT;
        return 0;
}

int DeleteValues()
{
        std::cout << "select deleted 'address_id' >";
        std::cin >> addr;
        EXEC SQL DELETE FROM t_stop WHERE address_id = :addr;
        EXEC SQL COMMIT;
}

int menu()
{
        char sitem[512];
        while(1)
        {
            printf("1. show\n");
            printf("2. select values\n");
            printf("3. update values\n");
            printf("4. insert values\n");
            printf("5. delete values\n");
            printf("6. Dynamic sql insert\n");
            printf("7. Dynamic sql select one\n");
            printf("8. Dynamic sql select more than one\n");
            printf("9. quit\n");
            printf("choose menu item > ");
            if(scanf("%s", &sitem)!=1) break;
         
if (strlen(sitem)>1) continue;   
           
                switch(sitem[0])
                {
                        case '1':
                        {
                                printf("_____________________\n");
                                printf("1. show\n");
                                ReadAllRecord();
                                printf("_____________________\n");
                                break;
                        }
                        case '2':
                        {
                                printf("_____________________\n");
                                printf("2. select values\n");
                                SelectValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '3':
                        {
                                printf("_____________________\n");
                                printf("3. update values\n");
                                UpdateValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '4':
                        {
                                printf("_____________________\n");
                                printf("4. insert values\n");	
                                InsertValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '5':
                        {
                                printf("_____________________\n");
                                printf("5. delete values\n");
                                DeleteValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '6':
                        {
                               Dynamic_sql_insert();
                               break;
                        }
                        case '7':
                        {       
                                std::string str;
                                std::cin >> str;
                                std::string req = "SELECT address_id, title, type_station FROM t_stop WHERE address_id=" + str;
                               Dynamic_sql_select_1(req.c_str());
                               break;
                        }
                         case '8':
                        {
                               //Dynamic_sql_select_2();
                               break;
                        }
                        case '9':
                        {
                                return 0;
                        }
                        default: break;
                }
        }
        return 0;
}

/*void f_error(void)
{
   printf("\n% .70s \n", sqlca.sqlerrm.sqlerrmc);
}*/
